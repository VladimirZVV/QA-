import requests

url = "https://api.chucknorris.io/jokes/random"
print(url)
result = requests.get(url)
print("стутус код : " + str(result.status_code))
assert 200 == result.status_code
if result.status_code == 200:
    print("Успіх, отримання нової шутки")
else:
    print("Провал, запит помилковий")
result.encoding = 'utf-8'
print(result.text)



import requests

class Test_new_joke:
"""Create a new joke"""
def __init__(self):
    pass

# def test_create_new_random_joke(self):
#     """Create a random joke"""
#
# url = "https://api.chucknorris.io/jokes/random"
# print(url)
# result = requests.get(url)
# print("стутус код : " + str(result.status_code))
# assert 200 == result.status_code
# if result.status_code == 200:
#     print("Успіх, отримання нової шутки")
# else:
#     print("Провал, запит помилковий")
# result.encoding = 'utf-8'
# print(result.text)
# # check = result.json()
# # check_info = check.get("categories")
# # print(check_info)
# # assert  check_info == []
# # print("Категорія правильна")
#
# check_info_value = check.get("value")
# print(check_info_value)
# name = "Chuck"
# if name in check_info_value:
#     print("Chuck присутній")
# else:
#     print("Chuck відсутній")
#
# """Шутки по категоріям"""


def test_create_new_random_categories_joke(self):
    """Create a random categories joke"""

category = "sport"
url = "https://api.chucknorris.io/jokes/random?category=" + category
print(url)
result = requests.get(url)
print("стутус код : " + str(result.status_code))
assert 200 == result.status_code
if result.status_code == 200:
    print("Успіх!!!, отримання нової шутки")
else:
    print("Провал!!!, запит помилковий")
result.encoding = 'utf-8'
print(result.text)
check = result.json()
# check_info = check.get("categories")
# print(check_info)
# assert  check_info == []
assert  check_info == ["sport"]
# print("Категорія правильна")
#
# check_info_value = check.get("value")
# print(check_info_value)
# name = "Chuck"
# if name in check_info_value:
#     print("Chuck присутній")
# else:
#     print("Chuck відсутній")



# random_joke = Test_new_joke()
# random_joke.test_create_new_random_joke()

sport_joke = Test_new_joke()
sport_joke.test_create_new_random_categories_joke





""""New method"""
import requests

class Test_new_location
    """Робота із новою локацією"""
    def test_create_new_location(self):
        """Створення нової локації"""
        base_url = "https://rahylshettyacademy.com" # базовий url
        key = "?key=qaclick123"                     # параметр для всіх запитів

        """створення нової локації"""

        post_resource == "/maps/api/place/add/json" # ресурс метода POST

        post_url = base_url + post_resource + key

        json_for_create_new_location = {

        }

        result_post = requests.post(post_url, json = json_for_create_new_location)
        print(result_post.text)
        print("стутус код : " + str(result_post.status_code))
        assert 200 == result_post.status_code
        if result_post.status_code == 200:
            print("Успіх!!!, створено нову локацію")
        else:
            print("Провал!!!, запит помилковий")

        check_post = result_post.json()
        check_info_post = check_post.get("status")
        print("Стутус код відповіді : " + check_info_post)
        assert check_info_post == "Ok"
        print("Статус відповіді правильний")
        place_id = check_post.get("place_id")
        print("Place_id : " + place_id)

        """Перевірка створення нової локації"""
        # place_id = "333"
        get_resource = "/maps/api/place/get/json"
        get_url = base_url + get_resource + key = "&place_id" + place_id
        print(get_url)
        result-get = requests.get(get_url)
        print(result_get.text)
        print("стутус код : " + str(result.get.status_code))
        assert 200 == result.get.status_code
        if result.get.status_code == 200:
            print("Успіх!!!, Перевірка створення нової локації пройшла успішно")
        else:
            print("Провал!!!, запит помилковий")

            """Зміна нової локації"""
        put_resource = "/maps/api/place/update/json"
        put_url = base_url + put_resource + key
        print(put_url)
        json_for_update_new_location = {
            "place_id": place_id, # змінну place_id отримуємо із метода post
            "address": "100 street, UA"
            "key": "qaclick123"
        }
        result_put = requests.put(put_url, json = json_for_update_new_location)
        print(result_put.text)
        print("стутус код : " + str(result.put.status_code))
        assert 200 == result.put.status_code
        if result.put.status_code == 200:
            print("Успіх!!!, Зміна нової локації пройшла успішно")
        else:
            print("Провал!!!, запит помилковий")
            check_put = result_put.json()
            check_put_info = check_put.get("msg")
            print("СМС :" + check_put_info)
            assert check_put_info == "Address successfully updated"
            print("СМС не вірне")






new_place = Test_new_location()
new_place.test_create_new_location()
